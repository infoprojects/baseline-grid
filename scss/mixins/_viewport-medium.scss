@import "susy";
@import "maptovars";

$susy: (
  container: $grid-bp-medium,
  columns: $columns-medium,
  gutters: $gutters,
  column-width: $column-width,
  gutter-position: $gposition,
  global-box-sizing: content-box,
);

.wrapper_#{$columns-medium} {
  max-width: $wrapper-m;
}

.container_#{$columns-medium} {
  @include container();

  &.breakout-container {
    max-width: 100%;

    .grid-zone.grid_#{$columns-medium} {
      margin-left: calc((100% - #{$grid-bp-medium}) / 2);
      margin-right: calc((100% - #{$grid-bp-medium}) / 2);
      width: $grid-bp-medium;
    }
  }
}

$zone-sizes: $grid-zones;
@each $zone-size in $zone-sizes {
  .grid-zone.grid_#{$zone-size} {
    @include span(6 of 6 no-gutter);

    @for $blok-size from 7 through $zone-size {
      .grid-blok.grid_#{$blok-size} {
        @include span(6 of 6 no-gutter);

        > .grid-element {
          @include span(6 of 6);
        }
      }
    }

    @for $blok-size from 1 through 6 {
      .grid-blok.grid_#{$blok-size} {
        @include span($blok-size of 6 no-gutter);

        > .grid-element {
          @include span($blok-size of $blok-size);
        }
      }
    }
  }
}

$zone-sizes: 3;
@each $zone-size in $zone-sizes {
  .grid-zone.grid_#{$zone-size} {
    @include span(6 of 6 no-gutter);

    @for $blok-size from 1 through $zone-size {
      .grid-blok.grid_#{$blok-size} {
        @include span($blok-size of $zone-size no-gutter);

        > .grid-element {
          @include span($blok-size of $blok-size);
        }
      }
    }
  }
}
