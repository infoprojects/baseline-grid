@import "susy";
@import "maptovars";

$container-size: $current-columns * $column-width;

$susy: (
  container: $container-size,
  columns: $current-columns,
  gutters: 20px/80px,
  column-width: $column-width,
  wrapper: 1400px,
  global-box-sizing: content-box,
  gutter-position: inside-static
);

.wrapper_#{$columns-large} {
  max-width: 1400px;
}

.container_#{$columns-large} {
  @include container();

  &.breakout-container {
    max-width: 100%;

    .grid-zone.grid_#{$columns-large} {
      margin-left: calc((100% - #{$container-size}) / 2);
      margin-right: calc((100% - #{$container-size}) / 2);
      width: $container-size;
    }
  }
}

$zone-sizes: $grid-zones;

@function last($zone-sizes) {
  @return nth($zone-sizes, length($zone-sizes));
}

$last: nth($zone-sizes, length($zone-sizes));

@each $zone-index in $zone-sizes {
  .grid-zone.grid_#{$zone-index} {
    @if $zone-index <= $current-columns {
      @include span($zone-index of $current-columns no-gutter);
    } @else {
      @include span($current-columns of $current-columns no-gutter);
    }
  }

  @if $columns-large == $current-columns {
    @for $blok-index from 1 through ($current-columns - $zone-index) {
      .grid-zone.push_#{$blok-index} {
        left: span($blok-index);
      }
      .grid-zone.pull_#{$blok-index} {
        left: -1 * span($blok-index);
      }
    }
  }
  .grid-zone.grid_#{$zone-index} {
    @for $blok-index from 1 through $zone-index {
      .grid-blok.grid_#{$blok-index} {
        @include span($blok-index of $zone-index no-gutter);

        > .grid-element {
          @include span($blok-index of $blok-index);
        }
      }
    }

    @if $container-size >= $columns-large * $column-width {
      @for $sub-index from 1 through $columns-large {
        .grid-blok.push_#{$sub-index} {
          left: span($sub-index of $zone-index);
        }
        .grid-blok.pull_#{$sub-index} {
          left: -1 * span($sub-index of $zone-index);
        }
        .grid-blok.prefix_#{$sub-index} {
          margin-left: span($sub-index of $zone-index);
        }
        .grid-blok.suffix_#{$sub-index} {
          margin-right: span($sub-index of $zone-index);
        }
      }
    }
  }
}
//---

@if $current-columns == $columns-medium and $current-columns != $columns-small {
  @each $zone-index in $zone-sizes {
    .grid-zone.grid_#{$zone-index} {
      @include span($current-columns of $current-columns no-gutter);

      @for $blok-index from 1 through $zone-index {
        .grid-blok.grid_#{$blok-index} {
          @include span($current-columns of $current-columns no-gutter);

          > .grid-element {
            @include span($current-columns of $current-columns);
          }
        }
      }

      @for $blok-index from 1 through $current-columns {
        .grid-blok.grid_#{$blok-index} {
          @include span($blok-index of $current-columns no-gutter);

          > .grid-element {
            @include span($blok-index of $blok-index);
          }
        }
      }
    }
  }

  $zone-sizes: $last;
  @each $zone-index in $zone-sizes {
    .grid-zone.grid_#{$zone-index} {
      @include span(($last + $last) of ($last + $last) no-gutter);

      @for $blok-index from 1 through $zone-index {
        .grid-blok.grid_#{$blok-index} {
          @include span($blok-index of $zone-index no-gutter);

          > .grid-element {
            @include span($blok-index of $blok-index);
          }
        }
      }
    }
  }
}

@if $current-columns == $columns-small {
  @each $zone-size in $zone-sizes {
    .grid-zone.grid_#{$zone-size} {
      @include span($last of $last no-gutter);

      @for $blok-size from $columns-small through $zone-size {
        .grid-blok.grid_#{$blok-size} {
          @include span($last of $last no-gutter);

          > .grid-element {
            @include span($last of $last);
          }
        }
      }

      @for $blok-size from 1 through $last {
        .grid-blok.grid_#{$blok-size} {
          @include span($blok-size of $last no-gutter);

          > .grid-element {
            @include span($blok-size of $blok-size);
          }
        }
      }
    }
  }
}
