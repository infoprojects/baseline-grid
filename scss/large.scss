@import "susy";

$grid-bp-large: 960px;

$susy: (
  container: $grid-bp-large,
  columns: 12,
  gutters: 20px/80px,
  global-box-sizing: content-box,
  math: fluid,
  output: float,
  column-width: 80px,
  gutter-position: inside-static
);

.wrapper_12 {
  max-width: 1400px;
}

.container_12 {
  @include container;

  &.breakout-container {
    max-width: 100%;

    .grid-zone.grid_12 {
      margin-left: calc((100% - #{$grid-bp-large}) / 2);
      margin-right: calc((100% - #{$grid-bp-large}) / 2);
      width: $grid-bp-large;

      &.breakout-zone {
        margin-left: 0;
        margin-right: 0;
        padding-left: calc((100% - #{$grid-bp-large}) / 2);
        padding-right: calc((100% - #{$grid-bp-large}) / 2);
        width: 100%;
      }
    }
  }
}

$zone-sizes: 12, 9, 6, 3;
@each $zone-size in $zone-sizes {
  .grid-zone.grid_#{$zone-size} {
    @include span($zone-size of 12 no-gutter);
  }

  @for $blok-size from 1 through (12 - $zone-size) {
    .grid-zone.push_#{$blok-size} {
      left: span($blok-size);
    }

    .grid-zone.pull_#{$blok-size} {
      left: -1 * span($blok-size);
    }
  }

  .grid-zone.grid_#{$zone-size} {
    @for $blok-size from 1 through $zone-size {
      .grid-blok.grid_#{$blok-size} {
        @include span($blok-size of $zone-size no-gutter);

        > .grid-element {
          @include span($blok-size of $blok-size);
        }

      }
    }

    @for $sub-size from 1 through 12 {
      .grid-blok.push_#{$sub-size} {
        left: span($sub-size of $zone-size);
      }

      .grid-blok.pull_#{$sub-size} {
        left: -1 * span($sub-size of $zone-size);
      }

      .grid-blok.prefix_#{$sub-size} {
        margin-left: span($sub-size of $zone-size);
      }

      .grid-blok.suffix_#{$sub-size} {
        margin-right: span($sub-size of $zone-size);
      }
    }
  }
}
