@import "susy";

$grid-bp-medium: 480px;

$susy: (
  container: $grid-bp-medium,
  columns: 6,
  gutters: 20px/80px,
  global-box-sizing: content-box,
  math: fluid,
  output: float,
  column-width: 80px,
  gutter-position: inside-static
);

.wrapper_12 {
  max-width: 480px;
}

.container_12 {
  @include container;

  &.breakout-container {
    max-width: 100%;

    .grid-zone.grid_12 {
      margin-left: calc((100% - #{$grid-bp-medium}) / 2);
      margin-right: calc((100% - #{$grid-bp-medium}) / 2);
      width: $grid-bp-medium;

      &.breakout-zone {
        margin-left: 0;
        margin-right: 0;
        padding-left: calc((100% - #{$grid-bp-medium}) / 2);
        padding-right: calc((100% - #{$grid-bp-medium}) / 2);
        width: 100%;
      }
    }
  }
}

$zone-sizes: 12, 9, 6;
@each $zone-size in $zone-sizes {
  .grid-zone.grid_#{$zone-size} {
    @include span(6 of 6 no-gutter);

    @for $blok-size from 7 through $zone-size {
      .grid-blok.grid_#{$blok-size} {
        @include span(6 of 6 no-gutter);

        > .grid-element {
          @include span(6 of 6);
        }
      }
    }

    @for $blok-size from 1 through 6 {
      .grid-blok.grid_#{$blok-size} {
        @include span($blok-size of 6 no-gutter);

        > .grid-element {
          @include span($blok-size of $blok-size);
        }
      }
    }
  }
}

$zone-sizes: 3;
@each $zone-size in $zone-sizes {
  .grid-zone.grid_#{$zone-size} {
    @include span(6 of 6 no-gutter);

    @for $blok-size from 1 through $zone-size {
      .grid-blok.grid_#{$blok-size} {
        @include span($blok-size of $zone-size no-gutter);

        > .grid-element {
          @include span($blok-size of $blok-size);
        }
      }
    }
  }
}
