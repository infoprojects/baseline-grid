@import "../scss/mixins/map-to-vars";
@import "../scss/mixins/debug-colors";

%grid-base {
  display: grid;
  gap: 15px;
}

.grid-wrapper {
  margin: 0 auto;
  width: 1200px;
}

.grid-container {
  margin: 0 auto;
  width: 1180px;

  @for $containerSize from 12 through 12 {
    &.container_#{$containerSize} {
      @extend %grid-base;

      grid-template-columns: repeat($containerSize, 1fr);
      grid-auto-flow: row dense;

      .grid-zone {
        @for $zoneSize from 1 through 24 {
          &.grid_#{$zoneSize} {
            @extend %grid-base;

            grid-auto-flow: row;
            grid-column: auto / span $zoneSize;
            grid-template-columns: repeat($zoneSize, 1fr);

            @for $pushSize from 1 through 24 {
              &.push_#{$pushSize} {
                @extend %grid-base;

                grid-column: auto / span $zoneSize;
                grid-column-start: #{$pushSize + 1};
                grid-template-columns: repeat($zoneSize, 1fr);
              }
            }

            @for $pullSize from 1 through 24 {
              &.pull_#{$pullSize} {
                @extend %grid-base;

                grid-column: 1 / span $zoneSize;
                grid-column-end: #{$zoneSize + 1};
                grid-template-columns: repeat($zoneSize, 1fr);
              }
            }
          }
        }
      }
    }
  }

  .grid-blok {
    @for $blokSize from 1 through 24 {
      &.grid_#{$blokSize} {
        grid-column: auto / span $blokSize;

        @for $prefixSize from 1 through 24 {
          &.prefix_#{$prefixSize} {
            @extend %grid-base;

            grid-column: auto / span #{$prefixSize + $blokSize};
            grid-template-columns: repeat(#{$prefixSize + $blokSize}, 1fr);

            > .grid-element {
              grid-column: auto / span $blokSize;
              grid-column-start: $prefixSize + 1;
            }
          }
        }

        @for $suffixSize from 1 through 24 {
          &.suffix_#{$suffixSize} {
            @extend %grid-base;

            grid-column: auto / span #{$suffixSize + $blokSize};
            grid-template-columns: repeat(#{$suffixSize + $blokSize}, 1fr);

            > .grid-element {
              grid-column: auto / span $blokSize;
            }
          }
        }

        .grid-nesting {
          @extend %grid-base;

          grid-column: auto / span $blokSize;
          grid-template-columns: repeat($blokSize, 1fr);

          // @for $nestedBlokSize from 1 through 24 {
          //   > .grid-blok.grid_#{$nestedBlokSize} {
          //     grid-column: auto / span $nestedBlokSize;

          //     .grid-nesting {
          //       @extend %grid-base;

          //       grid-column: auto / span $nestedBlokSize;
          //       grid-template-columns: repeat($nestedBlokSize, 1fr);
          //     }
          //   }
          // }
        }
      }
    }
  }
}
